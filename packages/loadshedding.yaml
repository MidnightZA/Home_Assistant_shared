rest:
  - resource: "https://developer.sepush.co.za/business/2.0/area"
    scan_interval: '01:00:00' # RATE LIMIT!
    headers:
      Token: !secret EskomSePush
    params:
      id: "uMhlathuze-2-arboretum"
    sensor:
      - name: EskomSePush
        force_update: true
        value_template: "OK"
        json_attributes:
          - events
          - info
          - schedule

sensor:
  #Eskom se push sensor
  - platform: rest
    name: EskomSePushAllowance
    resource: "https://developer.sepush.co.za/business/2.0/api_allowance"
    headers:
      Token: !secret EskomSePush
    json_attributes_path: "$.allowance"
    json_attributes:
      - count
      - limit
      - type
    value_template: "OK"
    scan_interval: 3600

  # template sensors abased on ESP above
  - platform: template
    sensors:

#Next Loadshedding time
      next_loadshedding_time:
        friendly_name: Next loadshedding time
        #device_class: timestamp
        unique_id: Next_Loadshedding_Time
        value_template: >-
            {%if state_attr('sensor.eskomsepush','events')|count > 0 %}
                {%if (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{state_attr('sensor.eskomsepush','events')[0].start }}
                {%elif (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{state_attr('sensor.eskomsepush','events')[0].start }}
                {%elif (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{ state_attr('sensor.eskomsepush','events')[1].start }}
                {%else%}
                NA
                {%endif%}
            {%else%}
            NA
            {%endif%}

#Next Loadshedding event
      next_loadshedding_event:
        friendly_name: Next loadshedding event
        unique_id: Next_Loadshedding_Event
        value_template: >-
            {%if state_attr('sensor.eskomsepush','events')|count > 0 %}
                {%if (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{state_attr('sensor.eskomsepush','events')[0].note }}
                {%elif (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{state_attr('sensor.eskomsepush','events')[0].note }}
                {%elif (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{ state_attr('sensor.eskomsepush','events')[1].note }}
                {%else%}
                NONE
                {%endif%}
            {%else%}
            NONE
            {%endif%}

#Next Loadshedding time end
      next_loadshedding_time_end:
        friendly_name: Next loadshedding end time
        unique_id: Next_Loadshedding_End_Time
        device_class: timestamp
        value_template: >-
          {%if state_attr('sensor.eskomsepush','events')|count > 0 %}       
                {%if (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{state_attr('sensor.eskomsepush','events')[0].end }}
                {%elif (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{state_attr('sensor.eskomsepush','events')[0].end }}
                {%elif (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{ state_attr('sensor.eskomsepush','events')[1].end }}
                {%else%}
                0
                {%endif%}
            {%else%}
            0
            {%endif%}

#Next Loadshedding duration
      next_loadshedding_duration:
        friendly_name: Next loadshedding duration
        unique_id: Next_Loadshedding_Duration
        unit_of_measurement: mins
        value_template: >-
          ``{%if state_attr('sensor.eskomsepush','events')|count > 0 %} 
            {{ (as_timestamp(states("sensor.next_loadshedding_time_end")) - as_timestamp(states("sensor.next_loadshedding_time"))) / 60 }}'
            {%else%}
            0
            {%endif%}   

#Time till Loadshedding starts
      time_till_loadshedding:
        friendly_name: Time until next loadshedding
        unique_id: Time_Until_Next_Loadshedding
        unit_of_measurement: mins
        value_template: >-
            {%if state_attr('sensor.eskomsepush','events')|count > 0 %}   
            {{ [( as_timestamp(states.sensor.next_loadshedding_time.state) | int - as_timestamp(now()) | int ) / 60,-1] | max }}
            {%else%}
            0
            {%endif%}

#Time till Loadshedding ends

      time_till_loadshedding_ends:
        friendly_name: Time until next loadshedding ends
        unique_id: Time_Until_Next_Loadshedding_ends
        unit_of_measurement: mins
        value_template: >-
            {%if state_attr('sensor.eskomsepush','events')|count > 0 %} 
            {{ [( as_timestamp(states.sensor.next_loadshedding_time_end.state) | int - as_timestamp(now()) | int ) / 60,-1] | max }}
            {%else%}
            0
            {%endif%}

# API calls remaining
      eskomsepush_calls_remaining:
        friendly_name: EskomSePush API Calls remaining
        unique_id: EskomSePush_calls_remaining
        value_template: '{{ int(state_attr("sensor.eskomsepushallowance","limit")) - int(state_attr("sensor.eskomsepushallowance","count")) }}'

# Loadshedding slot forecast
      loadshedding_slot_forecast:
        friendly_name: Loadshedding slot forecast
        unique_id: loadshedding_slot_forecast
        value_template: >
          {%- for event in states['sensor.eskomsepush'].attributes.events -%} {{
          as_timestamp(event['start']) | timestamp_custom('%a %d %b:') }} {{ event['note'] }} {{
          as_timestamp(event['start']) | timestamp_custom('from %H:%M') }} to {{
          as_timestamp(event['end']) | timestamp_custom('%H:%M') }}
          {{- '\n' -}} {%- endfor -%}


binary_sensor:
  - platform: template
    sensors:
      loadshedding_status:
        friendly_name: "Loadshedding Status"
        #device_class: problem
        value_template: >
            {%if state_attr('sensor.eskomsepush','events')|count > 0 %}
            True
            {% else %}
            False
            {% endif %}
            
timer:
  loadshedding_slot:
    duration: '02:00:00'
